<?php

namespace App\Http\Controllers;

use App\Models\LegalCase;
use App\Models\User;
use Illuminate\Http\Request;
use Inertia\Inertia;
use Illuminate\Support\Facades\DB;

class CaseController extends Controller
{
    public function index(Request $request)
    {
        try {
            $user = auth()->user();
            $companyId = $user->company_id;
            
            $query = LegalCase::with(['assignedTo', 'createdBy'])
                ->where('company_id', $companyId);
            
            if ($request->filled('search')) {
                $search = $request->get('search');
                $query->where('client_name', 'like', "%{$search}%");
            }
            
            if ($request->filled('status')) {
                $query->where('status', $request->get('status'));
            }
            
            if ($request->filled('assigned_to')) {
                $query->where('assigned_to', $request->get('assigned_to'));
            }
            
            $cases = $query->orderBy('created_at', 'desc')->paginate(15);
            
            $users = User::select('id', 'name')->get();
            $statuses = [
                'pendente' => 'Pendente',
                'em_coleta' => 'Em Coleta',
                'aguarda_peticao' => 'Aguarda Petição',
                'protocolado' => 'Protocolado',
                'concluido' => 'Concluído',
                'rejeitado' => 'Rejeitado',
            ];

            return Inertia::render('Cases/Index', [
                'cases' => $cases,
                'users' => $users,
                'statuses' => $statuses,
                'filters' => $request->only(['search', 'status', 'assigned_to']),
            ]);
            
        } catch (\Exception $e) {
            \Log::error('Error in cases index:', [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            throw $e;
        }
    }

    public function create()
    {
        $benefitTypes = $this->getAvailableBenefitTypes();

        return Inertia::render('Cases/Create', [
            'benefitTypes' => $benefitTypes,
        ]);
    }

    public function store(Request $request)
    {
        try {
            if (!auth()->check()) {
                return response()->json(['error' => 'Not authenticated'], 401);
            }

            if (!auth()->user()->company_id) {
                return response()->json(['error' => 'User not associated with company'], 400);
            }

            $validated = $request->validate([
                'client_name' => 'required|string|max:255',
                'client_cpf' => 'required|string|max:14',
                'vinculos_empregaticios' => 'nullable|array',
                'benefit_type' => 'nullable|string',
                'notes' => 'nullable|string',
            ]);

            $caseNumber = $this->generateCaseNumber();

            $caseData = [
                'case_number' => $caseNumber,
                'client_name' => $validated['client_name'],
                'client_cpf' => $validated['client_cpf'],
                'benefit_type' => $validated['benefit_type'] ?? null,
                'notes' => $validated['notes'] ?? null,
                'status' => 'pendente',
                'created_by' => auth()->id(),
                'company_id' => auth()->user()->company_id,
            ];

            $case = LegalCase::create($caseData);

            if (!empty($validated['vinculos_empregaticios'])) {
                foreach ($validated['vinculos_empregaticios'] as $vinculo) {
                    $case->employmentRelationships()->create([
                        'employer_name' => $vinculo['empregador'] ?? '',
                        'employer_cnpj' => $vinculo['cnpj'] ?? '',
                        'start_date' => $this->parseDate($vinculo['data_inicio'] ?? ''),
                        'end_date' => $this->parseDate($vinculo['data_fim'] ?? ''),
                        'salary' => $this->parseSalary($vinculo['salario'] ?? '') ?? 0,
                        'is_active' => empty($vinculo['data_fim']),
                        'notes' => 'Extraído automaticamente do CNIS',
                    ]);
                }
            }

            if ($request->expectsJson()) {
                return response()->json([
                    'success' => true,
                    'case' => $case,
                    'redirect' => route('cases.show', $case)
                ]);
            }

            return redirect()->route('cases.show', $case)
                ->with('success', 'Caso criado com sucesso!');

        } catch (\Illuminate\Validation\ValidationException $e) {
            if ($request->expectsJson()) {
                return response()->json(['errors' => $e->errors()], 422);
            }
            return back()->withErrors($e->errors())->withInput();

        } catch (\Exception $e) {
            \Log::error('Case store error:', [
                'message' => $e->getMessage(),
                'file' => $e->getFile(),
                'line' => $e->getLine()
            ]);

            if ($request->expectsJson()) {
                return response()->json(['error' => 'Internal server error: ' . $e->getMessage()], 500);
            }
            return back()->withErrors(['error' => 'Erro interno: ' . $e->getMessage()])->withInput();
        }
    }

    public function show(LegalCase $case)
    {
        if (!auth()->user()->isSuperAdmin() && $case->company_id !== auth()->user()->company_id) {
            abort(403, 'Acesso negado a este caso.');
        }

        $case->load([
            'assignedTo',
            'createdBy',
            'inssProcesses',
            'employmentRelationships',
            'documents',
            'petitions',
            'tasks' => function ($query) {
                $query->where('is_workflow_task', true)->orderBy('order', 'asc');
            },
        ]);

        $users = User::select('id', 'name')->get();
        $benefitTypes = $this->getAvailableBenefitTypes();

        return Inertia::render('Cases/Show', [
            'case' => $case,
            'users' => $users,
            'benefitTypes' => $benefitTypes,
        ]);
    }

    public function edit(LegalCase $case)
    {
        $users = User::select('id', 'name')->get();
        $benefitTypes = $this->getAvailableBenefitTypes();

        return Inertia::render('Cases/Edit', [
            'case' => $case,
            'users' => $users,
            'benefitTypes' => $benefitTypes,
        ]);
    }

    public function update(Request $request, LegalCase $case)
    {
        $validationRules = [];
        
        if ($request->has('client_name')) {
            $validationRules['client_name'] = 'required|string|max:255';
        }
        
        if ($request->has('client_cpf')) {
            $validationRules['client_cpf'] = 'required|string|max:14';
        }
        
        if ($request->has('benefit_type')) {
            $validationRules['benefit_type'] = 'nullable|string';
        }
        
        if ($request->has('status')) {
            $validationRules['status'] = 'required|in:pendente,em_coleta,aguarda_peticao,protocolado,concluido,rejeitado';
        }
        
        if ($request->has('description')) {
            $validationRules['description'] = 'nullable|string';
        }
        
        if ($request->has('notes')) {
            $validationRules['notes'] = 'nullable|string';
        }

        $validated = $request->validate($validationRules);

        $case->update($validated);

        return redirect()->route('cases.show', $case)
            ->with('success', 'Caso atualizado com sucesso!');
    }

    public function destroy(LegalCase $case)
    {
        $case->delete();

        return redirect()->route('cases.index')
            ->with('success', 'Caso excluído com sucesso!');
    }

    private function generateCaseNumber(): string
    {
        $year = date('Y');
        $prefix = "CASE-{$year}-";
        
        // Método simples e seguro
        $lastNumber = LegalCase::where('case_number', 'like', $prefix . '%')
            ->orderBy('case_number', 'desc')
            ->first();

        if ($lastNumber) {
            $lastNum = (int) str_replace($prefix, '', $lastNumber->case_number);
            $newNumber = $lastNum + 1;
        } else {
            $newNumber = 1;
        }

        $caseNumber = $prefix . str_pad($newNumber, 4, '0', STR_PAD_LEFT);
        
        // Verificação de segurança
        $attempts = 0;
        while (LegalCase::where('case_number', $caseNumber)->exists() && $attempts < 100) {
            $newNumber++;
            $caseNumber = $prefix . str_pad($newNumber, 4, '0', STR_PAD_LEFT);
            $attempts++;
        }
        
        return $caseNumber;
    }

    private function parseDate($dateString): ?string
    {
        if (empty($dateString) || $dateString === 'sem data fim') {
            return null;
        }

        if (preg_match('/^\d{2}\/\d{2}\/\d{4}$/', $dateString)) {
            $date = \DateTime::createFromFormat('d/m/Y', $dateString);
            return $date ? $date->format('Y-m-d') : null;
        }

        return null;
    }

    private function parseSalary($salaryString): ?float
    {
        if (empty($salaryString)) {
            return null;
        }

        $cleanSalary = preg_replace('/[^\d,.]/', '', $salaryString);
        $cleanSalary = str_replace(',', '.', $cleanSalary);
        
        return (float) $cleanSalary;
    }

    private function getAvailableBenefitTypes(): array
    {
        return [
            'aposentadoria_por_idade' => 'Aposentadoria por Idade',
            'aposentadoria_por_tempo_contribuicao' => 'Aposentadoria por Tempo de Contribuição',
            'aposentadoria_professor' => 'Aposentadoria Professor',
            'aposentadoria_pcd' => 'Aposentadoria PCD',
            'aposentadoria_especial' => 'Aposentadoria Especial',
            'aposentadoria_por_invalidez' => 'Aposentadoria por Invalidez',
            'auxilio_doenca' => 'Auxílio-Doença',
            'beneficio_por_incapacidade' => 'Benefício por Incapacidade',
            'pensao_por_morte' => 'Pensão por Morte',
            'auxilio_acidente' => 'Auxílio-Acidente',
            'salario_maternidade' => 'Salário-Maternidade',
            'outro' => 'Outro',
        ];
    }
}